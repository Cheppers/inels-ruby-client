#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'inels'
require 'terminal-table'
require_relative '../lib/inels/helpers'

# CLI for the controller.
class InelsCLI < Thor
  include Inels::Helpers

  desc 'list', 'List devices.'
  def list
    print_device_list(controller.devices)
  end

  desc 'get-device ID', 'Gets device\'s information.'
  method_option :verbose, type: :boolean,
                          default: false,
                          aliases: '-v',
                          desc: 'Additional information related to the device.'
  def get_device(id)
    print_device(controller.device(id, verbose: options[:verbose]))
  end

  desc 'set-correction ID CORRECTION', 'Sets device\'s correction.'
  def set_correction(id, correction)
    controller.set_correction(id, Integer(correction))
    puts 'Success.'
  end

  desc 'set-power ID POWER', 'Sets device\'s power.'
  def set_power(id, power)
    controller.set_power(id, Integer(power))
    puts 'Success.'
  end

  no_commands do # rubocop:disable Metrics/BlockLength
    def clients
      @clients ||= load_config['clients'].map do |c|
        {
          'ip' => c['ip'],
          'username' => c['username'],
          'password' => c['password']
        }
      end
    end

    def controller
      @controller ||= Inels::Controller.new(clients)
    end

    def print_device_list(devices)
      puts(Terminal::Table.new do |t|
        t.headings = devices.first.keys
        devices.each { |d| t << d.values }
      end)
    end

    def print_device(device)
      complex, simple = device.partition { |_k, v| v.is_a?(Array) }

      print_general_info(simple)
      print_complex_info(complex)
    end

    private

    def print_general_info(simple)
      puts(Terminal::Table.new do |t|
        t.title = 'General information'
        simple.each { |s| t << s }
      end)
    end

    def print_complex_info(complex)
      complex.each do |c|
        puts "\n"
        puts(Terminal::Table.new do |t|
          t.title = c.first
          t.headings = c[1].first.keys

          c[1].each do |h|
            t << h.values
          end
        end)
      end
    end
  end
end

InelsCLI.start
